services:
#  master:
#    build: ./
#    command: ["tail", "-f", "/dev/random"]
  camera:
    build: ./camera
#    command: ["tail", "-f", "/dev/random"]
    command: >
      bash -c "source /opt/ros/jazzy/setup.bash &&
      source /MaixSense_ROS/sipeed_tof_ms_a075_ros/ros2/install/setup.sh &&
      ros2 run sipeed_tof_cpp publisher"
#  rqt:
#    build: ./
#    environment:
#      - DISPLAY=${DISPLAY}
#      - QT_X11_NO_MITSHM=1
#    command: >
#      bash -c "source /opt/ros/jazzy/setup.bash
#      && rqt"
#    volumes:
#      - /tmp/.X11-unix:/tmp/.X11-unix:rw
#      - /dev/dri:/dev/dri
  rviz:
    build: ./
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
    command: >
      bash -c "source /opt/ros/jazzy/setup.bash
      && ros2 run rviz2 rviz2"
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /dev/dri:/dev/dri










#services:
##  viz:
##    image: osrf/ros:iron-desktop-full
###    container_name: ros_visualizer
##    depends_on:
##      - ros-master
###    networks:
###      - ros
##    environment:
##      - GDK_BACKEND=wayland
##      - "ROS_MASTER_URI=http://ros-master:11311"
##      - DISPLAY=${DISPLAY}
##      - "WAYLAND_DISPLAY=$WAYLAND_DISPLAY"
##      - "XDG_RUNTIME_DIR/$WAYLAND_DISPLAY=/tmp/$WAYLAND_DISPLAY"
###      - "QT_X11_NO_MITSHM=1" #fix some QT bugs
##    #share your user to the container in order to access your x11
##    user: 1000:1000 #adapt as needed!
##    volumes:
##      - /tmp/.X11-unix:/tmp/.X11-unix
###    volumes:
##      #share your x11 socket and permissions to the container
###      - /tmp/.X11-unix:/tmp/.X11-unix:rw
###      - /etc/group:/etc/group:ro
###      - /etc/passwd:/etc/passwd:ro
###      - /etc/shadow:/etc/shadow:ro
###      - /etc/sudoers:/etc/sudoers:ro
###      - /etc/sudoers.d:/etc/sudoers.d:ro
###      - /home/ivan:/home/<your_user>:rw #share your home with write permissions
##    command: rqt
#  ros-master:
#    image: ros:iron-ros-core
#    command: ["tail", "-f", "/dev/random"]
##    command: stdbuf -o L roscore
##    networks:
##      - ros
##    restart: always
#
##  talker:
##    image: ros:iron-ros-core
##    depends_on:
##      - ros-master
##    environment:
##      - "ROS_MASTER_URI=http://ros-master:11311"
##    command: stdbuf -o L rostopic pub /chatter std_msgs/String "hello" -r 1
##    networks:
##      - ros
##    restart: always
##
##  listener:
##    image: ros:iron-ros-core
##    depends_on:
##      - ros-master
##    environment:
##      - "ROS_MASTER_URI=http://ros-master:11311"
##    command: stdbuf -o L rostopic echo /chatter
##    networks:
##      - ros
##    restart: always
#networks:
#  ros:
#    driver: bridge

#    1  pwd
#    2  source /opt/ros/jazzy/setup.bash
#    3  ros2 node list
#    4  ros2 node info
#    5  ros2 node info /my_turtle
#    6  ros2 node info /teleop_turtl
#    7  ros2 node list
#    8  rqt_graph
#    9  ros2 service list
#   10  ros2 service type /clear
#   11  ros2 service list -t
#   12  ros2 service info /clear
#   13  ros2 service find std_srvs/srv/Empty
#   14  ros2 interface show std_srvs/srv/Empty
#   15  ros2 interface show turtlesim/srv/Spawn
#   16  ros2 service call /clear std_srvs/srv/Empty
#   17  ros2 service call /spawn turtlesim/srv/Spawn "{x: 2, y: 2, theta: 0.2, name: ''}"
#   18  ros2 launch demo_nodes_cpp introspect_services_launch.py
#   19  ros2 param list
#   20  ros2 param get /turtlesim background_g
#   21  ros2 param set /turtlesim bacground_r 150
#   22  ros2 param set /turtlesim background_r 150
#   23  ros2 param dump /turtlesim
#   24  ros2 param dump /turtlesim > turtlesim.yaml
#   25  cat turtlesim.yaml
#   26  ros2 param load /turtlesim turtlesim.yaml
#   27  ros2 node info /turtlesim
#   28  ros2 action list
#   29  ros2 action list -t
#   30  ros2 action type /turtle1/rotate_absolute
#   31  ros2 action info /turtle1/rotate_absolute
#   32  ros2 interface show turtlesim/action/RotateAbsolute
#   33  ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: 1.57}"
#   34  ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: -1.57}" --feedback
#   35  ros2 run rqt_console rqt_console
#   36  mkdir bag_files
#   37  cd bag_files
#   38  ros2 topic list
#   39  ros2 topic echo /turtle1/cmd_vel
#   40  ros2 bag record /turtle1/cmd_vel
#   41  ls
#   42  cat rosbag2_2024_09_10-19_00_44/
#   43  cat rosbag2_2024_09_10-19_00_44/rosbag2_2024_09_10-19_00_44_0.mcap
#   44  ros2 bag info rosbag2_2024_09_10-19_00_44
#   45  ros2 bag replay rosbag2_2024_09_10-19_00_44
#   46  ros2 bag play rosbag2_2024_09_10-19_00_44
#   47  ros2 topic hz /turtle1/pose
#   48  ros2 run demo_nodes_cpp introspection_service --ros-args -p service_configure_introspection:=contents
#   49  roscore
#   50  ros2 roscore
#   51  ros2 run roscore
#   52  rosdep install roscore
#   53  apt install ros-jazzy-roslaunch
#   54  apt install rod-jazzy-roslaunch
#   55  apt install *roslaunch
#   56  ros2
#   57  apt install telnet
#   58  telnet localhost 11311
#   59  telnet localhost 1234
#   60  telnet localhost 11311
#   61  ros2 run turtlesim turtlesim_node
#   62  source /opt/ros/jazzy/setup.bash
#   63  ros2 run turtlesim turtlesim_node
#   64  apt install ros-jazzy-turtlesim
#   65  apt update
#   66  apt install ros-jazzy-turtlesim
#   67  ros2 pkg executables turtlesim
#   68  ros2 run turtlesim turtlesim_node
#   69  ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml
#   70  ros2 run turtlesim turtlesim_node
#   71  ros2 launch turtlesim multisim.launch.py
#   72  ros2 launch  multisim.launch.py
#   73  ros2 launch turtlesim multisim.launch.py
#   74  ros2 run turtlesim turtlesim_node
#   75  ros2 run turtlesim turtle_teleop_key
#   76  source /opt/ros/jazzy/setup.bash
#   77  ros2 run turtlesim turtle_teleop_key
#   78  ros2 node list
#   79  ros2 topic list
#   80  ros2 service list
#   81  ros2 action list
#   82  sudo apt install '~nros-jazzy-rqt*'
#   83  rqt
#   84  ros2 node list
#   85  ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle
#   86  ros2 run turtlesim turtle_teleop_key
#   87  ros2 service list
#   88  ros2 service echo --flow-style /add_two_ints
#   89  ros2 bag record --all-services
#   90  ros2 bag record --service /add_two_ints
#   91  ls
#   92  pwd
#   93  rm rosbag2_2024_09_10-19_05_54 -rf
#   94  ros2 bag info rosbag2_2024_09_10-19_05_54
#   95  ros2 bag info rosbag2_2024_09_10-19_06_11
#   96  ros2 bag play --publish-service-requests rosbag2_2024_09_10-19_06_11
#   97  source /opt/ros/jazzy/setup.bash
#   98  ros2 topic echo /turtle1/cmd_vel
#   99  ros2 topic info /turtle1/cmd_vel
#  100  ros2 interface show geometry_msgs/msg/Twist
#  101  ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
#  102  ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
#  103  ros2 topic pub --rate 10 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
#  104  ros2 topic pub --rate 1turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
#  105  ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
#  106  ros2 topic echo /turtle1/pose
#  107  ros2 topic pub /pose geometry_msgs/msg/PoseStamped '{header: "auto", pose: {position: {x: 1.0, y: 2.0, z: 3.0}}}'
#  108  ros2 topic pub /reference sensor_msgs/msg/TimeReference '{header: "auto", time_ref: "now", source: "dumy"}'
#  109  ros2 topic hz /turtle1/pose
#  110  ros2 param set /introspection_service service_configure_introspection contents
#  111  ros2 param set /introspection_client client_configure_introspection contents
#  112  ros2 service echo --flow-style /add_two_ints
#  113  ros2 run demo_nodes_cpp introspection_client --ros-args -p client_configure_introspection:=contents
#  114  history
